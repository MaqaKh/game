/*
 * This source file was generated by the Gradle 'init' task
 */
package com.game;

import com.game.helper.JsonUtil;
import com.game.model.GameConfig;
import com.game.model.GameResult;
import com.game.service.GameEngine;


public class GameApp {

    public static void main(String[] args) {
        try {
            // Parse command line arguments
            CommandLineArgs cliArgs = parseArgs(args);

            // Load and parse configuration
            GameConfig config = JsonUtil.parseConfig(cliArgs.configPath());

            // Play the game
            GameEngine gameEngine = new GameEngine();
            GameResult result = gameEngine.playGame(config, cliArgs.bettingAmount());

            // Output JSON result
            String jsonResult = JsonUtil.toJson(result);
            System.out.println(jsonResult);

        } catch (Exception e) {
            System.err.println("Error: " + e.getMessage());
            System.exit(1);
        }
    }

    private static CommandLineArgs parseArgs(String[] args) {
        String configPath = null;
        Double bettingAmount = null;

        for (int i = 0; i < args.length; i++) {
            switch (args[i]) {
                case "--config":
                    if (i + 1 < args.length) {
                        configPath = args[i + 1];
                        i++; // Skip next argument
                    }
                    break;
                case "--betting-amount":
                    if (i + 1 < args.length) {
                        try {
                            bettingAmount = Double.parseDouble(args[i + 1]);
                            i++; // Skip next argument
                        } catch (NumberFormatException e) {
                            throw new IllegalArgumentException("Invalid betting amount: " + args[i + 1]);
                        }
                    }
                    break;
                default:
                    // Ignore unknown arguments
                    break;
            }
        }

        if (configPath == null) {
            throw new IllegalArgumentException("--config parameter is required");
        }

        if (bettingAmount == null) {
            throw new IllegalArgumentException("--betting-amount parameter is required");
        }

        if (bettingAmount <= 0) {
            throw new IllegalArgumentException("Betting amount must be positive");
        }

        return new CommandLineArgs(configPath, bettingAmount);
    }

    /**
     * Record to hold parsed command line arguments
     */
    private record CommandLineArgs(String configPath, double bettingAmount) {}
}